[metadata]
name = django-redis
version = attr: django_redis.__version__
url = https://github.com/jazzband/django-redis
author = Andrei Antoukh
author_email = niwi@niwi.nz
description = Full featured redis cache backend for Django.
long_description = file: README.rst
long_description_content_type = text/x-rst
license = BSD-3-Clause
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Web Environment
    Framework :: Django
    Framework :: Django :: 2.2
    Framework :: Django :: 3.1
    Framework :: Django :: 3.2
    Framework :: Django :: 4.0
    Intended Audience :: Developers
    License :: OSI Approved :: BSD License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Topic :: Software Development :: Libraries
    Topic :: Utilities

[options]
python_requires = >=3.6
packages =
    django_redis
    django_redis.client
    django_redis.serializers
    django_redis.compressors
install_requires =
    Django>=2.2
    redis>=3,!=4.0.0,!=4.0.1

[options.extras_require]
hiredis = redis[hiredis]>=3,!=4.0.0,!=4.0.1

[coverage:run]
omit =
    tests/*,

[coverage:report]
precision = 1
skip_covered = true

[flake8]
ignore =
    W503
    W601
    E203
max-line-length = 88

[isort]
profile = black
multi_line_output = 3

[tox:tox]
minversion = 3.15.0
requires = tox-docker
envlist =
    black
    flake8
    isort
    mypy
# tests against released versions
    py{36,37,38,39,310}-dj{22,31,32,40}-redislatest
# tests against unreleased versions
    py310-dj40-redismaster
    py310-djmain-redis{latest,master}

[docker:master]
name = master
image = redisfab/redis-py:6.2.6-buster
ports =
    6379:6379/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',6379)) else False"
volumes =
    bind:rw:{toxinidir}/docker/master/redis.conf:/redis.conf

[docker:sentinel]
name = sentinel
image = redisfab/redis-py-sentinel:6.2.6-buster
links =
    master:master
ports =
    26379:26379/tcp
healtcheck_cmd = python -c "import socket;print(True) if 0 == socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('127.0.0.1',26379)) else False"
volumes =
    bind:rw:{toxinidir}/docker/sentinel/sentinel.conf:/sentinel.conf

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38, black, flake8, isort, mypy
    3.9: py39
    3.10: py310

[gh-actions:env]
DJANGO =
    2.2: dj22
    3.1: dj31
    3.2: dj32
    4.0: dj40
    main: djmain
REDIS =
    latest: redislatest
    master: redismaster

[testenv]
passenv = CI GITHUB*
commands =
    {envpython} -m pytest --cov-report= --ds=settings.sqlite {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_json {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_lz4 {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_msgpack {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_sentinel {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_sharding {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_usock {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_zlib {posargs}
    {envpython} -m pytest --cov-append --cov-report= --ds=settings.sqlite_zstd {posargs}
    {envpython} -m coverage report
    {envpython} -m coverage xml
docker =
    master
    sentinel
deps =
    dj22: Django>=2.2,<2.3
    dj31: Django>=3.1,<3.2
    dj32: Django>=3.2,<3.3
    dj40: Django>=4.0,<4.1
    djmain: https://github.com/django/django/archive/main.tar.gz
    msgpack>=0.6.0
    pytest
    pytest-cov
    pytest-django
    pytest-pythonpath
    pytest-mock
    redismaster: https://github.com/redis/redis-py/archive/master.tar.gz
    lz4>=0.15
    pyzstd>=0.15

[testenv:{black,flake8,isort,mypy}]
basepython = python3
envdir = {toxworkdir}/lint
docker =
commands =
    black: black --target-version py36 {posargs:--check --diff} setup.py django_redis/ tests/
    flake8: flake8 {posargs} setup.py django_redis/ tests/
    isort: isort {posargs:--check-only --diff} django_redis/ tests/
    mypy: mypy {posargs:--cobertura-xml-report .} django_redis tests
deps =
    black
    django-stubs
    flake8
    isort >= 5.0.2
    lxml
    mypy
# typing dependencies
    pytest
    pytest-django
    pytest-mock
    types-redis
skip_install = true

[tool:pytest]
DJANGO_SETTINGS_MODULE = settings.sqlite

addopts =
    --doctest-modules
    --cov=django_redis
    --cov-config=setup.cfg
    --no-cov-on-fail
filterwarnings =
    error::DeprecationWarning
    error::FutureWarning
    error::PendingDeprecationWarning
    ignore:.*distutils package is deprecated.*:DeprecationWarning
python_paths = tests
testpaths = tests
xfail_strict = true

[mypy]
plugins =
    mypy_django_plugin.main
pretty = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

[mypy.plugins.django-stubs]
# all test settings look similar enough for mypy
django_settings_module = tests.settings.sqlite
ignore_missing_settings = true

# third party mypy config
[mypy-lz4.frame]
ignore_missing_imports = true

[mypy-pyzstd]
ignore_missing_imports = true

[mypy-msgpack]
ignore_missing_imports = true

[mypy-redis.sentinel]
ignore_missing_imports = true
